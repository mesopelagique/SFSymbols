//4DPlugin.cpp/* -------------------------------------------------------------------------------- # #	4DPlugin.cpp #	source generated by 4D Plugin Wizard #	Project : SFSymbols #	author : mesopelagique #	22/05/2021 # # --------------------------------------------------------------------------------*/#include "4DPluginAPI.h"#include "4DPlugin.h"#include "4DPlugin-JSON.h"#include <stdlib.h>#include <string.h>#if __APPLE__#include <CoreGraphics/CoreGraphics.h>#include <COCOA/Cocoa.h>#endifvoid PluginMain( PA_long32 selector, PA_PluginParameters params ){	switch( selector )	{// --- Photos		case 1 :			SFSymbolPicture( params );			break;	}}// ------------------------------------ Photos ------------------------------------void convertToUTF8(const CUTF16String* fromString, CUTF8String* toString){    CFStringRef str = CFStringCreateWithCharacters(kCFAllocatorDefault, (const UniChar *)fromString->c_str(), fromString->length());    if(str){        size_t size = CFStringGetMaximumSizeForEncoding(CFStringGetLength(str), kCFStringEncodingUTF8) + sizeof(uint8_t);        std::vector<uint8_t> buf(size);        CFIndex len = 0;        CFStringGetBytes(str, CFRangeMake(0, CFStringGetLength(str)), kCFStringEncodingUTF8, 0, true, (UInt8 *)&buf[0], size, &len);        *toString = CUTF8String((const uint8_t *)&buf[0], len);        CFRelease(str);    }}void SFSymbolPicture( PA_PluginParameters params ){    /*1*/PA_Unistring* name;	/*2*/PA_ObjectRef options;	/*0*/PA_Picture returnValue = nullptr;    name = PA_GetStringParameter( params, 1 );    options = PA_GetObjectParameter( params, 2 );    CUTF16String systemSymbolName16 = CUTF16String(name->fString, name->fLength);    CUTF8String systemSymbolName8;    convertToUTF8(&systemSymbolName16, &systemSymbolName8);    //@autoreleasepool {    NSString *systemSymbolName = [NSString stringWithUTF8String:(const char *)systemSymbolName8.c_str()];    NSImage* image = [NSImage imageWithSystemSymbolName: systemSymbolName accessibilityDescription: nil];    if(ob_is_defined(options, L"pointSize") \       || ob_is_defined(options, L"weight") \       || ob_is_defined(options, L"scale") \       || ob_is_defined(options, L"style")) {        NSImageSymbolConfiguration* conf = nullptr;        if (ob_is_defined(options, L"pointSize")  && ob_is_defined(options, L"weight") && ob_is_defined(options, L"scale")) {            CGFloat pointSize = ob_get_n(options, L"pointSize");            CGFloat weight = ob_get_n(options, L"weight");            CGFloat scale = ob_get_n(options, L"scale");            conf = [NSImageSymbolConfiguration configurationWithPointSize: pointSize weight: weight scale:scale];        } else if (ob_is_defined(options, L"pointSize")  && ob_is_defined(options, L"weight")) {            CGFloat pointSize = ob_get_n(options, L"pointSize");            CGFloat weight = ob_get_n(options, L"weight");            conf = [NSImageSymbolConfiguration configurationWithPointSize: pointSize weight: weight];        } else if (ob_is_defined(options, L"style") && ob_is_defined(options, L"scale")) {            CUTF8String styleUTF;            ob_get_s(options, L"style", &styleUTF);            NSString *style = [NSString stringWithUTF8String:(const char *)styleUTF.c_str()];            CGFloat scale = ob_get_n(options, L"scale");            conf = [NSImageSymbolConfiguration configurationWithTextStyle:style scale:scale];        } else if (ob_is_defined(options, L"style")) {            CUTF8String styleUTF;            ob_get_s(options, L"style", &styleUTF);            NSString *style = [NSString stringWithUTF8String:(const char *)styleUTF.c_str()];            conf = [NSImageSymbolConfiguration configurationWithTextStyle: style];        } else if (ob_is_defined(options, L"scale")) {            CGFloat scale = ob_get_n(options, L"scale");            if (scale>0) {                conf = [NSImageSymbolConfiguration configurationWithScale: scale];            }        }        if (conf != nullptr) {            image = [image imageWithSymbolConfiguration: conf];        }    }    // NSData *data = [image TIFFRepresentation];    NSGraphicsContext *context = [NSGraphicsContext currentContext];    CGFloat width = 32;    CGFloat height = image.size.height * 32 / image.size.width;    if(ob_is_defined(options, L"width")) {        width = ob_get_n(options, L"width");    }    if(ob_is_defined(options, L"height")) {        height = ob_get_n(options, L"height");    }    CGRect imageCGRect = CGRectMake(0, 0, width, height);    NSRect imageRect = NSRectFromCGRect(imageCGRect);    CGImageRef imageRef = [image CGImageForProposedRect:&imageRect context:context hints: nil];    NSBitmapImageRep *newRep = [[NSBitmapImageRep alloc] initWithCGImage:imageRef];    [newRep setSize: imageCGRect.size];    NSData *data = [newRep representationUsingType: NSBitmapImageFileTypePNG properties: @{}];    [newRep autorelease];    returnValue = PA_CreatePicture((void*)[data bytes], PA_long32([data length]));    // --- write the code of SFSymbolPicture here...    PA_ReturnPicture( params, returnValue );}